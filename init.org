
#+Title: Emacs init.el 
#+Author: midnight-the-rock
#+Property: header-args:elisp :tangle ./init.el

** Basic configuration

*** Inhibit startup messages 

#+begin_src elisp

  (setq visible-bell t
	inhibit-startup-screen  t
	inhibit-startup-message t
	inhibit-scratch-message t
	inhibit-startup-echo-area-message t)

#+end_src


*** Number lines when required

#+begin_src elisp 

  (global-display-line-numbers-mode 1)
  (setq display-line-numbers-type 'relative)

  (dolist (mode '(sly-mrepl-mode-hook
		  gud-mode-hook
		  org-mode-hook
		  help-mode-hook
		  term-mode-hook
		  shell-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src


** Modeline overhaul

#+begin_src elisp

  (defun delta-mode-line--prefix (prefix)
    (concat
     (propertize " " 'display `(raise +0.20))
     (propertize prefix)
     (propertize " " 'display `(raise -0.20))))

  (defun delta-mode-line--buffer ()
    (delta-mode-line--prefix (if (and buffer-file-name (buffer-modified-p)) " +" " -")))

  (defun delta-mode-line--evil-state ()
    (cond ((string= evil-state "insert") " 󰏪")
	  ((string= evil-state "visual") " 󰈊")
	  (t " 󰳽")))

  (defun delta-mode-line--format (prefix left right)
    (let* ((div-space (/ (window-right-divider-width) (window-font-width nil 'header-line)))
	   (available-space (- (window-total-width) (length prefix) (length left) (length right) div-space)))
      (concat prefix left (make-string available-space ?\ ) right)))

  (defun delta-mode-line ()
    (setq-default mode-line-format
		  '((:eval (delta-mode-line--format
			    (format-mode-line (list (delta-mode-line--buffer)))
			    (format-mode-line (list " %b "))
			    (format-mode-line (list "  "))))))
    (setq-default header-line-format mode-line-format)
    (setq-default mode-line-format '((:eval (make-string (window-total-width) ?━)))))

  (delta-mode-line)

#+end_src 


** Package installation setup

#+begin_src elisp
  (require 'package)
  (setq package-archives'(("org" . "https://orgmode.org/elpa/")
			  ("melpa" . "https://melpa.org/packages/")
			  ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src 


** Minibuffer completions 

Ivy will server for good minibuffer completions. Ivy-rich and which-key will allow for a better experience and additional information.

#+begin_src elisp

    (use-package ivy
      :diminish
      :bind (("C-s" . swiper)
	     :map ivy-minibuffer-map
	     ("TAB" . ivy-alt-done)))

    (ivy-mode 1)

    (use-package counsel
      :bind (("M-x" . counsel-M-x)))

    (use-package ivy-rich)
    (ivy-rich-mode 1)

    (use-package which-key)
    (which-key-mode)

#+end_src


** Custom keymaps 

#+begin_src elisp

  (use-package general
    :ensure t
    :config
    (general-evil-setup nil))

  (general-create-definer delta/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "S-SPC")

  (delta/leader-keys
    "SPC" 'counsel-M-x
    "c c" 'compile
    "c f" 'find-file
    "c s" 'swiper-isearch
    "w j" 'evil-window-down
    "w k" 'evil-window-up
    "w h" 'evil-window-left
    "w l" 'evil-window-right
    "w r" 'split-window-right
    "w r" 'split-window-right
    "b l" 'previous-buffer
    "b h" 'next-buffer
    "b s" 'save-buffer)

#+end_src


** Evil-mode

Once you try vim-motions, you cannot go back. I am glad [[https://github.com/emacs-evil/evil][evil-mode]] exists.

#+begin_src elisp

  ;; (use-package evil
  ;;   :init
  ;;   (setq evil-want-C-i-jump nil)
  ;;   (setq evil-want-C-u-scroll t)
  ;;   (setq evil-want-integration t)
  ;;   (setq evil-want-keybinding nil)
  ;;   (evil-mode 1))

#+end_src 


** Org-mode

#+begin_src elisp

  (defun lambda/setup-org ()
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (variable-pitch-mode 1)
    (setq evil-auto-indent nil))

  (defun lambda/set-org-visual-fill ()
    (setq visual-fill-column-width 100
	  visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package org
    :hook (org-mode . lambda/setup-org)
    :config
    (setq org-ellipsis " ←"
	  org-agenda-files '("~/Desktop/agenda/")
	  org-hide-emphasis-markers t))

  (use-package visual-fill-column
    :hook (org-mode . lambda/set-org-visual-fill))

  (use-package org-drill)

  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("hs" . "src haskell"))
  (add-to-list 'org-structure-template-alist '("cpp" . "src cpp"))
  (add-to-list 'org-structure-template-alist '("apl" . "src apl"))

#+end_src


** Development

*** LSP-mode

#+begin_src elisp

    (use-package lsp-mode
      :commands (lsp lsp-deferred)
      :init
      (setq lsp-keymap-prefix "C-c l")
      :config
      (lsp-enable-which-key-integration t)
      (setq lsp-headerline-breadcrumb-enable nil))

#+end_src 

*** Languages

*** Haskell

#+begin_src elisp

  (use-package haskell-mode)

#+end_src


*** Rust

#+begin_src elisp

    (use-package rust-mode
      :init (add-hook 'rust-mode-hook 'lsp))

#+end_src


*** Lua 

#+begin_src elisp 

  (use-package lua-mode)

#+end_src

*** Smalltalk

#+begin_src elisp

  (use-package smalltalk-mode)

#+end_src

*** Common Lisp

:NOTE: remember to install src_sh{sbcl} on your respective machine for this to work as intended.

#+begin_src elisp

  (setq inferior-lisp-program "/bin/sbcl --noinform")

#+end_src

*** Project management 

#+begin_src elisp

  (use-package magit)
  (use-package projectile)

#+end_src


*** Completion

#+begin_src elisp

  (use-package company
    :bind (:map company-active-map
		("C-j" . company-select-next)
		("C-k" . company-select-previous))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src 


** Layout and colorscheme

#+begin_src elisp

  (load-theme 'delta t)

  (setq default-frame-alist
	(append (list '(tool-bar-lines . 0)
		      '(menu-bar-lines . 0)
		      '(vertical-scroll-bars . nil)
		      '(internal-border-width . 25)
		      '(font . "BlexMono Nerd Font 18"))))

  (setq window-divider-default-right-width 25)
  (setq window-divider-default-places 'right-only)
  (window-divider-mode 1)

#+end_src


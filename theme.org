
#+Title: Emacs theme.org
#+Author: midnight-the-rock
#+Property: header-args:elisp :tangle ./delta-theme.el

** Delta Emacs Colorscheme

** Defining pallete 

#+begin_src elisp

  (defgroup delta nil
    "settings for delta-theme")

  (deftheme delta 
    "custom colorscheme for Delta Emacs, very low contrast ahead"
    :background-mode 'dark
    :kind 'color-scheme
    :family 'modus)

  (setq background     "#1e191e"
	background-alt "#262026"
	foreground     "#dbd7d2"
	color-1        "#aca7a6"
	color-2        "#efa69b"
	color-3        "#ebb59f"
	color-4        "#eca0b3"
	color-5        "#ee84ae"
	color-6        "#9aa8b3"
	color-7        "#eed5c6"
	color-8        "#b5bab5"
	color-9        "#f9b4c0"
	color-10       "#d1c9ab"
	color-11       "#d0bfa9"
	color-12       "#e2b6c4"
	color-13       "#e89dba"
	delta-bg       "#1e191e"
	delta-var      "#c3c8d1"
	delta-str      "#6f7789"
	delta-key      "#395a72"
	delta-fun      "#73626e"
	delta-type     "#998c9a"
	delta-cons     "#7c94ac"
	delta-bg-alt   "#0f252b"
	delta-modeline  "#3b363b")

  (setq delta-font "BlexMono Nerd Font")

#+end_src

** Defining utility functions and macros

Some utility functions are required, so that I have a better time defining stuff around the colorscheme.

#+begin_src elisp

  (defun delta-inherit-face (face style)
    "inherit new style from external face"
    (set-face-attribute face nil
			:family     'unspecified :slant      'unspecified
			:weight     'unspecified :height     'unspecified
			:underline  'unspecified :overline   'unspecified
			:background 'unspecified :foreground 'unspecified
			:box        'unspecified :inherit    style))

  (defmacro delta-defface (face description &rest attributes)
    `(progn (defface ,face nil ,description :group 'delta)
	    (set-face-attribute ',face nil
				:family delta-font
				:slant      (or ,(plist-get attributes :slant) 'unspecified)
				:weight     (or ,(plist-get attributes :weight) 'unspecified)
				:height     (or ,(plist-get attributes :height) 'unspecified)
				:underline  (or ,(plist-get attributes :underline) 'unspecified)
				:overline   (or ,(plist-get attributes :overline) 'unspecified)
				:box        (or ,(plist-get attributes :box) 'unspecified)
				:inherit    (or ,(plist-get attributes :inherit) 'unspecified)
				:background (or ,(plist-get attributes :bg) 'unspecified)
				:foreground (or ,(plist-get attributes :fg) 'unspecified))))				

  (defmacro delta-font-lock-keyword (mode expr item)
    `(font-lock-add-keywords ,mode
			     '((,expr
				(0 (prog1 () (compose-region (match-beginning 1)
							     (match-end 1)
							     ,item)))))))

#+end_src

** Defining the colorscheme

#+begin_src elisp

  (delta-defface delta-default-face
		 "default face"
		 :fg foreground
		 :bg background)


  (delta-defface delta-default-invert-face
		 "inverted default face"
		 :fg background
		 :bg foreground)


  (delta-defface delta-background-face
		 "full background color face (required for space filling sometimes)"
		 :fg background
		 :bg background)

  (delta-defface delta-type-face
		 "face for data types"
		 :fg delta-type
		 :bg background)

  (delta-defface delta-cons-face
		 "face for data types"
		 :fg delta-cons
		 :bg background)

  (delta-defface delta-string-face
		 "face for string-like elements of any type"
		 :fg delta-str
		 :bg delta-bg
		 :slant 'italic)

  (delta-defface delta-keyword-face
		 "delta keyword face"
		 :bg delta-bg
		 :fg delta-key)

  (delta-defface delta-user-defined-face
		 "face for any user defined variable/function"
		 :bg delta-bg
		 :fg delta-var)

  (delta-defface delta-function-face
		 "face for any user defined variable/function"
		 :bg delta-bg
		 :fg delta-fun)

  (delta-defface delta-fixed-pitch-face
		 "delta fixed pitch face"
		 :fg foreground
		 :bg delta-bg
		 :height 200)

  (delta-defface delta-variable-pitch-face
		 "delta variable pitch face"
		 :fg foreground
		 :bg delta-bg
		 :height 200)

  (delta-defface delta-mode-line-face
		 "delta modeline face"
		 :fg delta-modeline
		 :height 300)

  (delta-defface delta-header-line-face
		 "header line custom face"
		 :fg foreground
		 :bg delta-bg-alt
		 :height 200)

  (delta-defface delta-selection-face
		 "face for selection highlight"
		 :fg delta-str
		 :bg delta-bg)

  (delta-defface delta-modeline-face
		 "tooltip face"
		 :fg foreground
		 :bg delta-bg)

#+end_src

** TODO Mapping colorscheme

#+begin_src elisp

  (set-background-color background)
  (set-foreground-color foreground)

  ;; defaults
  (delta-inherit-face 'default                      'delta-default-face)
  (delta-inherit-face 'fixed-pitch                  'delta-fixed-pitch-face)
  (delta-inherit-face 'variable-pitch               'delta-variable-pitch-face)

  ;; header/mode line
  (delta-inherit-face 'header-line                  'delta-header-line-face)
  (delta-inherit-face 'mode-line-active             'delta-mode-line-face)
  (delta-inherit-face 'mode-line-inactive           'delta-mode-line-face)

  ;; layout
  (delta-inherit-face 'fringe                       'delta-background-face)
  (delta-inherit-face 'window-divider               'delta-background-face)
  (delta-inherit-face 'window-divider-last-pixel    'delta-background-face)
  (delta-inherit-face 'window-divider-first-pixel   'delta-background-face)

  ;; font lock
  (delta-inherit-face 'font-lock-constant-face      'delta-cons-face)
  (delta-inherit-face 'font-lock-type-face          'delta-type-face)
  (delta-inherit-face 'font-lock-keyword-face       'delta-keyword-face)
  (delta-inherit-face 'font-lock-string-face        'delta-string-face)
  (delta-inherit-face 'font-lock-comment-face       'delta-string-face)
  (delta-inherit-face 'font-lock-variable-use-face  'delta-user-defined-face)
  (delta-inherit-face 'font-lock-variable-name-face 'delta-user-defined-face)
  (delta-inherit-face 'font-lock-function-name-face 'delta-function-face)
  (delta-inherit-face 'font-lock-function-call-face 'delta-function-face)

  (set-face-attribute 'font-lock-preprocessor-face nil
		      :box nil
		      :background (face-background 'default)
		      :foreground "#ffcbcb")

  (set-face-attribute 'font-lock-number-face nil
		      :box nil
		      :background (face-background 'default)
		      :foreground "#7c94ac")

  (delta-inherit-face 'match  'delta-default-invert-face)
  (delta-inherit-face 'cursor 'delta-default-invert-face)
  (delta-inherit-face 'region 'delta-default-invert-face)

  ;; dired
  (delta-inherit-face 'dired-directory 'delta-tooltip-face)

  ;; swiper
  (with-eval-after-load 'swiper
    (delta-inherit-face 'swiper-line-face 'delta-selection-face)
    (delta-inherit-face 'swiper-match-face-1 'delta-default-invert-face)
    (delta-inherit-face 'swiper-match-face-2 'delta-default-invert-face)
    (delta-inherit-face 'swiper-match-face-3 'delta-default-invert-face)
    (delta-inherit-face 'swiper-match-face-4 'delta-default-invert-face))

  ;; ivy
  (delta-inherit-face 'ivy-current-match 'delta-selection-face)
  (delta-inherit-face 'ivy-minibuffer-match-face-1 'delta-tooltip-face)
  (delta-inherit-face 'ivy-minibuffer-match-face-2 'delta-tooltip-face)
  (delta-inherit-face 'ivy-minibuffer-match-face-3 'delta-tooltip-face)
  (delta-inherit-face 'ivy-minibuffer-match-face-4 'delta-tooltip-face)

  ;; company
  (with-eval-after-load 'company-mode
    (delta-inherit-face 'company-tooltip           'delta-default-face)
    (delta-inherit-face 'company-preview           'delta-selection-face)
    (delta-inherit-face 'company-tooltip-selection 'delta-selection-face))

  ;; which key
  (set-face-attribute 'which-key-key-face nil
		      :box nil
		      :background (face-background 'default)
		      :foreground "#dbd7d2")

  (set-face-attribute 'which-key-separator-face nil
		      :box nil
		      :background (face-background 'default)
		      :foreground "#73626e")

  (set-face-attribute 'which-key-command-description-face nil
		      :box nil
		      :background (face-background 'default)
		      :foreground "#6f7789")

  (with-eval-after-load 'treemacs
    (delta-inherit-face 'treemacs-hl-line-face 'delta-selection-face)

    (set-face-attribute 'treemacs-root-face nil
			:box nil
			:background (face-background 'default)
			:foreground "#c3c8d1"
			:underline nil
			:height 200)

    (set-face-attribute 'treemacs-file-face nil
			:box nil
			:background (face-background 'default)
			:foreground "#c3c8d1")

    (set-face-attribute 'treemacs-directory-face nil
			:box nil
			:background (face-background 'default)
			:foreground "#c3c8d1"))

  ;; org-mode
  (with-eval-after-load 'org
    (set-face-attribute 'org-meta-line nil :foreground "#998c9a" :family "BlexMono Nerd Font" :height 180 :weight 'bold) 

    (set-face-attribute 'org-document-info nil :foreground "#998c9a" :family "BlexMono Nerd Font" :height 180 :weight 'bold) 

    (set-face-attribute 'org-document-title nil :foreground "#998c9a" :family "BlexMono Nerd Font" :height 180 :weight 'bold)

    (set-face-attribute 'org-document-info-keyword nil :foreground "#998c9a" :family "BlexMono Nerd Font" :height 180 :weight 'bold) 

    (set-face-attribute 'org-ellipsis nil :underline nil :foreground "#998c9a" :inherit 'variable-pitch) 

    (delta-inherit-face 'org-table    'delta-fixed-pitch-face)
    (delta-inherit-face 'org-checkbox 'delta-fixed-pitch-face)
    (delta-inherit-face 'org-code     'delta-fixed-pitch-face)
    (delta-inherit-face 'org-block    'delta-fixed-pitch-face)
    (delta-inherit-face 'org-block    'delta-fixed-pitch-face)
    (delta-inherit-face 'org-verbatim 'delta-fixed-pitch-face)

    (set-face-attribute 'org-block-end-line nil :background "#262026" :foreground "#dbd7d2" :family "BlexMono Nerd Font Bold")

    (set-face-attribute 'org-block-begin-line nil :background "#262026" :foreground "#dbd7d2" :family "BlexMono Nerd Font Bold")

    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))

    (set-face-attribute 'org-level-1 nil
			:font "BlexMono Nerd Font"
			:weight 'regular
			:height 3.0
			:foreground "#947e85")

    (set-face-attribute 'org-level-2 nil
			:font "BlexMono Nerd Font"
			:weight 'regular
			:height 2.0
			:foreground "#947e85")

    (set-face-attribute 'org-level-3 nil
			:font "BlexMono Nerd Font"
			:weight 'regular
			:height 1.7
			:foreground "#947e85")

    (set-face-attribute 'org-level-4 nil
			:font "BlexMono Nerd Font"
			:weight 'regular
			:height 1.2
			:foreground "#947e85")

    (set-face-attribute 'org-level-5 nil
			:font "BlexMono Nerd Font"
			:weight 'regular
			:height 1.0
			:foreground "#947e85")

    (set-face-attribute 'org-level-6 nil
			:font "BlexMono Nerd Font"
			:weight 'regular
			:height 1.0
			:foreground "#947e85")

    (set-face-attribute 'org-level-7 nil
			:font "BlexMono Nerd Font"
			:weight 'regular
			:height 1.0
			:foreground "#947e85")

    (set-face-attribute 'org-level-8 nil
			:font "BlexMono Nerd Font"
			:weight 'regular
			:height 1.0
			:foreground "#947e85")

    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch)))

  (delta-font-lock-keyword 'org-mode
			   "^ *\\([-]\\) "
			   "•")

  (delta-font-lock-keyword 'org-mode
			   "^ *\\(\\#\\+\\)\\w+: "
			   "\u200b")

  (delta-font-lock-keyword 'org-mode
			   "^ *\\(\\#\\+begin_\\|\\#\\+BEGIN_\\)\\(quote\\|QUOTE\\)"
			   " ")

  (delta-font-lock-keyword 'org-mode
			   "^ *\\(\\#\\+end_\\|\\#\\+END_\\)\\(quote\\|QUOTE\\)"
			   " ")

  (delta-font-lock-keyword 'org-mode
			   "^ *\\(\\#\\+begin_\\|\\#\\+BEGIN_\\)\\(src\\|SRC\\)"
			   " ")

  (delta-font-lock-keyword 'org-mode
			   "^ *\\(\\#\\+end_\\|\\#\\+END_\\)\\(src\\|SRC\\)"
			   " ")

  (add-to-list 'font-lock-extra-managed-props 'display)


  (delta-font-lock-keyword 'org-mode "^ *\\(*\\{1,7\\} \\)" "\u200b")

  (delta-font-lock-keyword 'lisp-mode       "(\\(lambda\\)" "󰘧")
  (delta-font-lock-keyword 'emacs-lisp-mode "(\\(lambda\\)" "󰘧")

  (provide-theme 'delta)


#+end_src
